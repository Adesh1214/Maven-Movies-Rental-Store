use  mavenmovies;

SELECT * FROM RENTAL;
SELECT * FROM INVENTORY;
SELECT * FROM FILM;
SELECT * FROM CUSTOMER;
SELECT * FROM STORE;

# 1
SELECT FIRST_NAME, LAST_NAME ,EMAIL 
FROM CUSTOMER;

# 2
select count(FILM_ID) AS TOTAL_MOVIES FROM FILM
WHERE RENTAL_RATE = 0.99;

# 3
SELECT RENTAL_RATE, COUNT(FILM_ID) TOTAL_FILMS
FROM FILM
group by RENTAL_RATE
ORDER BY RENTAL_RATE;

# 4 
SELECT COUNT(*) AS MOVIES_COUNT, RATING
FROM FILM
group by RATING
order by MOVIES_COUNT DESC
LIMIT 1;

# 5 
SELECT INV.STORE_ID, F.RATING, COUNT(F.RATING) AS TOTAL_FILMS
FROM INVENTORY AS INV LEFT JOIN FILM AS F
ON INV.FILM_ID = F.FILM_ID
group by INV.STORE_ID,F.RATING
ORDER BY  TOTAL_FILMS DESC;

# 6 
SELECT F.TITLE, C.NAME AS CATEGORY, LANG.NAME AS lANGUAGE 
FROM FILM AS F LEFT JOIN LANGUAGE AS LANG 
ON F.LANGUAGE_ID  = LANG.LANGUAGE_ID
LEFT JOIN FILM_CATEGORY AS FC
ON F.FILM_ID = FC.FILM_ID
LEFT JOIN CATEGORY AS C
ON C.CATEGORY_ID = FC.CATEGORY_ID; 

# 7 
SELECT F.FILM_ID,F.TITLE AS FILM_NAME, COUNT(R.RENTAL_ID) AS TOTAL_RENTAL_COUNT
FROM RENTAL AS R LEFT JOIN INVENTORY AS INV
ON R.INVENTORY_ID = INV.INVENTORY_ID
LEFT JOIN FILM AS F
ON F.FILM_ID = INV.FILM_ID
GROUP BY FILM_ID
ORDER BY TOTAL_RENTAL_COUNT DESC;

# 8
SELECT F.TITLE,SUM(P.AMOUNT) AS TOTAL_REVENUE
	FROM RENTAL AS R LEFT JOIN INVENTORY AS INV
		ON R.INVENTORY_ID = INV.INVENTORY_ID
				LEFT JOIN FILM AS F
		ON INV.FILM_ID = F.FILM_ID
				LEFT JOIN PAYMENT AS P
		ON R.RENTAL_ID  = P.RENTAL_ID
GROUP BY  F.TITLE
ORDER BY TOTAL_REVENUE DESC
LIMIT 10 ;

 # 9 
 SELECT C.FIRST_NAME, C.lAST_NAME, SUM(P.AMOUNT) AS SPENDING
 FROM PAYMENT AS P
 LEFT JOIN CUSTOMER AS C
 ON C.CUSTOMER_ID = P.CUSTOMER_ID
 group by C.FIRST_NAME,C.LAST_NAME
 order by SPENDING DESC
 LIMIT 1;
 
 # 10
 SELECT S.STORE_ID, SUM(P.AMOUNT) AS REVENUE
 FROM PAYMENT AS P 
 JOIN STAFF AS SF
 ON P.STAFF_ID = SF.STAFF_ID
 JOIN STORE AS S
 ON SF.STORE_ID = S.STORE_ID
 group by S.STORE_ID
 order by REVENUE DESC;
 
 # 11
 SELECT COUNT(RENTAL_ID) AS RENTALS, extract(YEAR FROM RENTAL_DATE) AS YEAR_NUMBER, MONTHNAME(RENTAL_DATE) AS MONTH_NAME
 FROM RENTAL
 GROUP BY extract(YEAR FROM RENTAL_DATE), MONTHNAME(RENTAL_DATE);
 
 # 12
 SELECT CUSTOMER_ID, COUNT(RENTAL_ID) AS NUMBER_OF_RENTALS
 FROM RENTAL
 group by CUSTOMER_ID
 HAVING NUMBER_OF_RENTALS > 30;
 
 # 12
 SELECT CUSTOMER_ID,RENTAL_ID,AMOUNT,PAYMENT_DATE
FROM PAYMENT
WHERE CUSTOMER_ID<101;

# 13 
SELECT CUSTOMER_ID,RENTAL_ID,AMOUNT,PAYMENT_DATE
FROM PAYMENT
WHERE CUSTOMER_ID<101 AND AMOUNT > 5 AND PAYMENT_DATE> '2006-01-01';

# 14
SELECT CUSTOMER_ID,RENTAL_ID,AMOUNT,PAYMENT_DATE
FROM PAYMENT
WHERE AMOUNT > 5 OR CUSTOMER_ID = 42 OR CUSTOMER_ID = 53 OR CUSTOMER_ID = 60 OR CUSTOMER_ID = 75;

# OR
SELECT CUSTOMER_ID,RENTAL_ID,AMOUNT,PAYMENT_DATE
FROM PAYMENT
WHERE AMOUNT > 5 AND CUSTOMER_ID IN (42,53,60,75);

# 15
SELECT TITLE,SPECIAL_FEATURES
FROM FILM
WHERE SPECIAL_FEATURES LIKE '%Behind the Scenes%';

# 16 
SELECT RATING,COUNT(FILM_ID) AS NUMBER_OF_FILMS
FROM FILM
GROUP BY RATING;

# 17 
SELECT RENTAL_DURATION,COUNT(FILM_ID) AS NUMBER_OF_FILMS
FROM FILM
GROUP BY RENTAL_DURATION;

# 18
SELECT RATING,
	COUNT(FILM_ID)  AS COUNT_OF_FILMS,
    MIN(LENGTH) AS SHORTEST_FILM,
    MAX(LENGTH) AS LONGEST_FILM,
    AVG(LENGTH) AS AVERAGE_FILM_LENGTH,
    AVG(RENTAL_DURATION) AS AVERAGE_RENTAL_DURATION
FROM FILM
GROUP BY RATING
ORDER BY AVERAGE_FILM_LENGTH;

# 19
SELECT REPLACEMENT_COST,
	COUNT(FILM_ID) AS NUMBER_OF_FILMS,
    MIN(RENTAL_RATE) AS CHEAPEST_RENTAL,
    MAX(RENTAL_RATE) AS EXPENSIVE_RENTAL,
    AVG(RENTAL_RATE) AS AVERAGE_RENTAL
FROM FILM
GROUP BY REPLACEMENT_COST
ORDER BY REPLACEMENT_COST;

# 20 
SELECT CUSTOMER_ID,COUNT(*) AS TOTAL_RENTALS
FROM RENTAL
GROUP BY CUSTOMER_ID
HAVING TOTAL_RENTALS < 15;

# 21
SELECT TITLE,LENGTH,RENTAL_RATE
FROM FILM
ORDER BY LENGTH DESC
LIMIT 20;

# 22
SELECT TITLE,LENGTH,
	CASE
		WHEN LENGTH < 60 THEN 'UNDER 1 HR'
        WHEN LENGTH BETWEEN 60 AND 90 THEN '1 TO 1.5 HRS'
        WHEN LENGTH > 90 THEN 'OVER 1.5 HRS'
        ELSE 'ERROR'
	END AS LENGTH_BUCKET
FROM FILM;

# 23
SELECT DISTINCT TITLE,
	CASE
		WHEN RENTAL_DURATION <= 4 THEN 'RENTAL TOO SHORT'
        WHEN RENTAL_RATE >= 3.99 THEN 'TOO EXPENSIVE'
        WHEN RATING IN ('NC-17','R') THEN 'TOO ADULT'
        WHEN LENGTH NOT BETWEEN 60 AND 90 THEN 'TOO SHORT OR TOO LONG'
        WHEN DESCRIPTION LIKE '%Shark%' THEN 'NO_NO_HAS_SHARKS'
        ELSE 'GREAT_RECOMMENDATION_FOR_CHILDREN'
	END AS FIT_FOR_RECOMMENDATTION
FROM FILM;

 # 24 
 SELECT CUSTOMER_ID,FIRST_NAME,LAST_NAME,
	CASE
		WHEN STORE_ID = 1 AND ACTIVE = 1 THEN 'store 1 active'
        WHEN STORE_ID = 1 AND ACTIVE = 0 THEN 'store 1 inactive'
        WHEN STORE_ID = 2 AND ACTIVE = 1 THEN 'store 2 active'
        WHEN STORE_ID = 2 AND ACTIVE = 0 THEN 'store 2 inactive'
        ELSE 'ERROR'
	END AS STORE_AND_STATUS
FROM CUSTOMER;

# 25
SELECT DISTINCT INVENTORY.INVENTORY_ID,INVENTORY.STORE_ID,
FILM.TITLE, FILM.DESCRIPTION 
FROM FILM INNER JOIN INVENTORY 
ON FILM.FILM_ID = INVENTORY.FILM_ID;

# 26
SELECT ACTOR.ACTOR_ID,ACTOR.FIRST_NAME,ACTOR.LAST_NAME,
COUNT(FILM_ACTOR.FILM_ID) AS NUMBER_OF_FILMS
FROM ACTOR LEFT JOIN FILM_ACTOR
ON ACTOR.ACTOR_ID= FILM_ACTOR.ACTOR_ID
group by ACTOR.ACTOR_ID ;
 
 # 27
SELECT FILM.TITLE,COUNT(FILM_ACTOR.ACTOR_ID) AS NUMBER_OF_ACTORS
FROM FILM LEFT JOIN FILM_ACTOR
ON FILM.FILM_ID = FILM_ACTOR.FILM_ID
GROUP BY FILM.TITLE;

# 28 
SELECT ACTOR.FIRST_NAME,ACTOR.LAST_NAME,FILM.TITLE
FROM ACTOR INNER JOIN FILM_ACTOR
ON ACTOR.ACTOR_ID = FILM_ACTOR.ACTOR_ID
INNER JOIN FILM
ON FILM_ACTOR.FILM_ID = FILM.FILM_ID
ORDER BY ACTOR.LAST_NAME, ACTOR.FIRST_NAME;

# 29
SELECT DISTINCT FILM.TITLE,FILM.DESCRIPTION
FROM FILM INNER JOIN INVENTORY
ON FILM.FILM_ID = INVENTORY.FILM_ID AND INVENTORY.STORE_ID = 2;

# 30 

(SELECT FIRST_NAME,LAST_NAME,
'ADVISORS' AS DESIGNATION
FROM ADVISOR
UNION
SELECT FIRST_NAME,LAST_NAME,
'STAFF MEMBER' AS DESIGNATION
FROM STAFF);
